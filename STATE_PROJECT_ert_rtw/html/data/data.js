var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"STATE_PROJECT","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\alfon\\OneDrive\\Desktop\\Università Magistrale\\Algoritmi e Protocolli per la Sicurezza\\Sistemi-embedded\\STATE_PROJECT_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'STATE_PROJECT'.\r\n *\r\n * Model version                  : 1.42\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Sun May 26 09:44:30 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"STATE_PROJECT.h\"             /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  STATE_PROJECT_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  STATE_PROJECT_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.1 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"STATE_PROJECT.c","type":"source","group":"model","path":"C:\\Users\\alfon\\OneDrive\\Desktop\\Università Magistrale\\Algoritmi e Protocolli per la Sicurezza\\Sistemi-embedded\\STATE_PROJECT_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: STATE_PROJECT.c\r\n *\r\n * Code generated for Simulink model 'STATE_PROJECT'.\r\n *\r\n * Model version                  : 1.42\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Sun May 26 09:44:30 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"STATE_PROJECT.h\"\r\n#include \"rtwtypes.h\"\r\n#include <math.h>\r\n#include <stddef.h>\r\n\r\n/* Named constants for Chart: '<Root>/AutomaticGate' */\r\n#define CALL_EVENT                     (-1)\r\n#define IN_AUTOMATIC_GATE_LOGIC        ((uint8_T)1U)\r\n#define IN_CLOSED                      ((uint8_T)1U)\r\n#define IN_CLOSING                     ((uint8_T)2U)\r\n#define IN_EMERGENCY                   ((uint8_T)3U)\r\n#define IN_EMERGENCY_LED               ((uint8_T)4U)\r\n#define IN_EMERGENCY_P1_CLOSED         ((uint8_T)5U)\r\n#define IN_EMERGENCY_P1_OPEN           ((uint8_T)6U)\r\n#define IN_LONGPRESSED                 ((uint8_T)1U)\r\n#define IN_NO_ACTIVE_CHILD             ((uint8_T)0U)\r\n#define IN_OPEN                        ((uint8_T)7U)\r\n#define IN_OPENING                     ((uint8_T)8U)\r\n#define IN_OPEN_DUR_SETTING_INTERNAL   ((uint8_T)1U)\r\n#define IN_PRESSED                     ((uint8_T)2U)\r\n#define IN_RELEASED                    ((uint8_T)3U)\r\n#define IN_WORK_DUR_SETTING_INTERNAL   ((uint8_T)1U)\r\n#define IN_YELLOW_OFF                  ((uint8_T)1U)\r\n#define IN_YELLOW_ON                   ((uint8_T)2U)\r\n#define event_B1_pressed               (0)\r\n#define event_B2_pressed               (1)\r\n#define event_B3_pressed               (2)\r\n#define NumBitsPerChar                 8U\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\n\r\n/* Forward declaration for local functions */\r\nstatic void broadcast_B1_pressed_c2_STATE_P(void);\r\nstatic void broadcast_B3_pressed_c2_STATE_P(void);\r\nstatic void broadcast_B2_pressed_c2_STATE_P(void);\r\nstatic real_T mod(real_T x);\r\nstatic void CLOSING(void);\r\nstatic void OPENING(void);\r\nstatic void AUTOMATIC_GATE(void);\r\nstatic void c2_STATE_PROJECT(void);\r\nstatic real_T rtGetNaN(void);\r\nstatic real32_T rtGetNaNF(void);\r\n\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nstatic void rt_InitInfAndNaN(size_t realSize);\r\nstatic boolean_T rtIsInf(real_T value);\r\nstatic boolean_T rtIsInfF(real32_T value);\r\nstatic boolean_T rtIsNaN(real_T value);\r\nstatic boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\nstatic real_T rtGetInf(void);\r\nstatic real32_T rtGetInfF(void);\r\nstatic real_T rtGetMinusInf(void);\r\nstatic real32_T rtGetMinusInfF(void);\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic void rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nstatic boolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nstatic boolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nstatic boolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nstatic boolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nstatic real32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/* Function for Chart: '<Root>/AutomaticGate' */\r\nstatic void broadcast_B1_pressed_c2_STATE_P(void)\r\n{\r\n  int32_T b_previousEvent;\r\n  b_previousEvent = rtDW.sfEvent;\r\n  rtDW.sfEvent = event_B1_pressed;\r\n\r\n  /* Chart: '<Root>/AutomaticGate' */\r\n  c2_STATE_PROJECT();\r\n  rtDW.sfEvent = b_previousEvent;\r\n}\r\n\r\n/* Function for Chart: '<Root>/AutomaticGate' */\r\nstatic void broadcast_B3_pressed_c2_STATE_P(void)\r\n{\r\n  int32_T b_previousEvent;\r\n  b_previousEvent = rtDW.sfEvent;\r\n  rtDW.sfEvent = event_B3_pressed;\r\n\r\n  /* Chart: '<Root>/AutomaticGate' */\r\n  c2_STATE_PROJECT();\r\n  rtDW.sfEvent = b_previousEvent;\r\n}\r\n\r\n/* Function for Chart: '<Root>/AutomaticGate' */\r\nstatic void broadcast_B2_pressed_c2_STATE_P(void)\r\n{\r\n  int32_T b_previousEvent;\r\n  b_previousEvent = rtDW.sfEvent;\r\n  rtDW.sfEvent = event_B2_pressed;\r\n\r\n  /* Chart: '<Root>/AutomaticGate' */\r\n  c2_STATE_PROJECT();\r\n  rtDW.sfEvent = b_previousEvent;\r\n}\r\n\r\n/* Function for Chart: '<Root>/AutomaticGate' */\r\nstatic real_T mod(real_T x)\r\n{\r\n  real_T r;\r\n  if (rtIsNaN(x)) {\r\n    r = (rtNaN);\r\n  } else if (rtIsInf(x)) {\r\n    r = (rtNaN);\r\n  } else if (x == 0.0) {\r\n    r = 0.0;\r\n  } else {\r\n    r = fmod(x, 120.0);\r\n    if (r == 0.0) {\r\n      r = 0.0;\r\n    } else if (x < 0.0) {\r\n      r += 120.0;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n/* Function for Chart: '<Root>/AutomaticGate' */\r\nstatic void CLOSING(void)\r\n{\r\n  rtDW.is_CLOSING = IN_NO_ACTIVE_CHILD;\r\n  rtDW.is_AUTOMATIC_GATE = IN_CLOSED;\r\n  rtDW.is_active_OPEN_DUR_SETTING = 1U;\r\n  rtDW.is_OPEN_DUR_SETTING = IN_OPEN_DUR_SETTING_INTERNAL;\r\n  rtDW.is_active_WORK_DUR_SETTING = 1U;\r\n  rtDW.is_WORK_DUR_SETTING = IN_WORK_DUR_SETTING_INTERNAL;\r\n}\r\n\r\n/* Function for Chart: '<Root>/AutomaticGate' */\r\nstatic void OPENING(void)\r\n{\r\n  if (rtDW.sfEvent == event_B1_pressed) {\r\n    rtDW.is_OPENING = IN_NO_ACTIVE_CHILD;\r\n    rtDW.is_AUTOMATIC_GATE = IN_CLOSING;\r\n    rtDW.temporalCounter_i2 = 0U;\r\n    rtDW.is_CLOSING = IN_YELLOW_ON;\r\n    rtDW.temporalCounter_i1 = 0U;\r\n  } else if (rtDW.temporalCounter_i2 >= (uint32_T)ceil(rtDW.WORK_DUR * 10.0)) {\r\n    rtDW.is_OPENING = IN_NO_ACTIVE_CHILD;\r\n    rtDW.is_AUTOMATIC_GATE = IN_OPEN;\r\n    rtDW.temporalCounter_i1 = 0U;\r\n  } else {\r\n    switch (rtDW.is_OPENING) {\r\n     case IN_YELLOW_OFF:\r\n      if (rtDW.temporalCounter_i1 >= 10U) {\r\n        rtDW.is_OPENING = IN_YELLOW_ON;\r\n        rtDW.temporalCounter_i1 = 0U;\r\n      }\r\n      break;\r\n\r\n     case IN_YELLOW_ON:\r\n      if (rtDW.temporalCounter_i1 >= 10U) {\r\n        rtDW.is_OPENING = IN_YELLOW_OFF;\r\n        rtDW.temporalCounter_i1 = 0U;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/* Function for Chart: '<Root>/AutomaticGate' */\r\nstatic void AUTOMATIC_GATE(void)\r\n{\r\n  switch (rtDW.is_AUTOMATIC_GATE) {\r\n   case IN_CLOSED:\r\n    if (rtDW.sfEvent == event_B1_pressed) {\r\n      rtDW.is_WORK_DUR_SETTING = IN_NO_ACTIVE_CHILD;\r\n      rtDW.is_active_WORK_DUR_SETTING = 0U;\r\n      rtDW.is_OPEN_DUR_SETTING = IN_NO_ACTIVE_CHILD;\r\n      rtDW.is_active_OPEN_DUR_SETTING = 0U;\r\n      rtDW.is_AUTOMATIC_GATE = IN_OPENING;\r\n      rtDW.temporalCounter_i2 = 0U;\r\n      rtDW.is_OPENING = IN_YELLOW_ON;\r\n      rtDW.temporalCounter_i1 = 0U;\r\n    } else {\r\n      if ((rtDW.is_active_OPEN_DUR_SETTING != 0U) && (rtDW.is_OPEN_DUR_SETTING ==\r\n           IN_OPEN_DUR_SETTING_INTERNAL) && (rtDW.sfEvent == event_B2_pressed))\r\n      {\r\n        rtDW.OPEN_DUR = mod(rtDW.OPEN_DUR) + 10.0;\r\n      }\r\n\r\n      if ((rtDW.is_active_WORK_DUR_SETTING != 0U) && (rtDW.is_WORK_DUR_SETTING ==\r\n           IN_WORK_DUR_SETTING_INTERNAL) && (rtDW.sfEvent == event_B3_pressed))\r\n      {\r\n        rtDW.WORK_DUR = mod(rtDW.WORK_DUR) + 10.0;\r\n      }\r\n    }\r\n    break;\r\n\r\n   case IN_CLOSING:\r\n    CLOSING();\r\n    break;\r\n\r\n   case IN_EMERGENCY:\r\n    if (rtDW.temporalCounter_i1 >= 100U) {\r\n      rtDW.is_AUTOMATIC_GATE = IN_EMERGENCY_LED;\r\n    } else {\r\n      rtDW.is_AUTOMATIC_GATE = IN_CLOSED;\r\n      rtDW.is_active_OPEN_DUR_SETTING = 1U;\r\n      rtDW.is_OPEN_DUR_SETTING = IN_OPEN_DUR_SETTING_INTERNAL;\r\n      rtDW.is_active_WORK_DUR_SETTING = 1U;\r\n      rtDW.is_WORK_DUR_SETTING = IN_WORK_DUR_SETTING_INTERNAL;\r\n    }\r\n    break;\r\n\r\n   case IN_EMERGENCY_LED:\r\n    rtDW.is_AUTOMATIC_GATE = IN_CLOSED;\r\n    rtDW.is_active_OPEN_DUR_SETTING = 1U;\r\n    rtDW.is_OPEN_DUR_SETTING = IN_OPEN_DUR_SETTING_INTERNAL;\r\n    rtDW.is_active_WORK_DUR_SETTING = 1U;\r\n    rtDW.is_WORK_DUR_SETTING = IN_WORK_DUR_SETTING_INTERNAL;\r\n    break;\r\n\r\n   case IN_EMERGENCY_P1_CLOSED:\r\n    rtDW.is_EMERGENCY_P1_CLOSED = IN_NO_ACTIVE_CHILD;\r\n    rtDW.is_AUTOMATIC_GATE = IN_CLOSED;\r\n    rtDW.is_active_OPEN_DUR_SETTING = 1U;\r\n    rtDW.is_OPEN_DUR_SETTING = IN_OPEN_DUR_SETTING_INTERNAL;\r\n    rtDW.is_active_WORK_DUR_SETTING = 1U;\r\n    rtDW.is_WORK_DUR_SETTING = IN_WORK_DUR_SETTING_INTERNAL;\r\n    break;\r\n\r\n   case IN_EMERGENCY_P1_OPEN:\r\n    rtDW.is_EMERGENCY_P1_OPEN = IN_NO_ACTIVE_CHILD;\r\n    rtDW.is_AUTOMATIC_GATE = IN_OPEN;\r\n    rtDW.temporalCounter_i1 = 0U;\r\n    break;\r\n\r\n   case IN_OPEN:\r\n    if ((rtDW.temporalCounter_i1 >= (uint32_T)ceil(rtDW.OPEN_DUR * 10.0)) ||\r\n        (rtDW.sfEvent == event_B1_pressed)) {\r\n      rtDW.is_AUTOMATIC_GATE = IN_CLOSING;\r\n      rtDW.temporalCounter_i2 = 0U;\r\n      rtDW.is_CLOSING = IN_YELLOW_ON;\r\n      rtDW.temporalCounter_i1 = 0U;\r\n    }\r\n    break;\r\n\r\n   case IN_OPENING:\r\n    OPENING();\r\n    break;\r\n  }\r\n}\r\n\r\n/* Function for Chart: '<Root>/AutomaticGate' */\r\nstatic void c2_STATE_PROJECT(void)\r\n{\r\n  /* Chart: '<Root>/AutomaticGate' */\r\n  if (rtDW.is_active_c2_STATE_PROJECT == 0U) {\r\n    rtDW.is_active_c2_STATE_PROJECT = 1U;\r\n    rtDW.is_c2_STATE_PROJECT = IN_AUTOMATIC_GATE_LOGIC;\r\n    rtDW.is_active_B1 = 1U;\r\n    rtDW.is_B1 = IN_RELEASED;\r\n    rtDW.is_active_B3 = 1U;\r\n    rtDW.is_B3 = IN_RELEASED;\r\n    rtDW.is_active_B2 = 1U;\r\n    rtDW.is_B2 = IN_RELEASED;\r\n    rtDW.is_active_AUTOMATIC_GATE = 1U;\r\n    rtDW.is_AUTOMATIC_GATE = IN_CLOSING;\r\n    rtDW.temporalCounter_i2 = 0U;\r\n    rtDW.is_CLOSING = IN_YELLOW_ON;\r\n    rtDW.temporalCounter_i1 = 0U;\r\n  } else if (rtDW.is_c2_STATE_PROJECT == IN_AUTOMATIC_GATE_LOGIC) {\r\n    if (rtDW.is_active_B1 != 0U) {\r\n      switch (rtDW.is_B1) {\r\n       case IN_LONGPRESSED:\r\n        rtDW.is_B1 = IN_RELEASED;\r\n        break;\r\n\r\n       case IN_PRESSED:\r\n        rtDW.is_B1 = IN_LONGPRESSED;\r\n        broadcast_B1_pressed_c2_STATE_P();\r\n        break;\r\n\r\n       case IN_RELEASED:\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (rtDW.is_active_B3 != 0U) {\r\n      switch (rtDW.is_B3) {\r\n       case IN_LONGPRESSED:\r\n        rtDW.is_B3 = IN_RELEASED;\r\n        break;\r\n\r\n       case IN_PRESSED:\r\n        rtDW.is_B3 = IN_LONGPRESSED;\r\n        broadcast_B3_pressed_c2_STATE_P();\r\n        break;\r\n\r\n       case IN_RELEASED:\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (rtDW.is_active_B2 != 0U) {\r\n      switch (rtDW.is_B2) {\r\n       case IN_LONGPRESSED:\r\n        rtDW.is_B2 = IN_RELEASED;\r\n        break;\r\n\r\n       case IN_PRESSED:\r\n        rtDW.is_B2 = IN_LONGPRESSED;\r\n        broadcast_B2_pressed_c2_STATE_P();\r\n        break;\r\n\r\n       case IN_RELEASED:\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (rtDW.is_active_AUTOMATIC_GATE != 0U) {\r\n      AUTOMATIC_GATE();\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<Root>/AutomaticGate' */\r\n}\r\n\r\n/* Model step function */\r\nvoid STATE_PROJECT_step(void)\r\n{\r\n  /* Chart: '<Root>/AutomaticGate' */\r\n  if (rtDW.temporalCounter_i1 < MAX_uint32_T) {\r\n    rtDW.temporalCounter_i1++;\r\n  }\r\n\r\n  if (rtDW.temporalCounter_i2 < MAX_uint32_T) {\r\n    rtDW.temporalCounter_i2++;\r\n  }\r\n\r\n  rtDW.sfEvent = CALL_EVENT;\r\n  c2_STATE_PROJECT();\r\n\r\n  /* End of Chart: '<Root>/AutomaticGate' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid STATE_PROJECT_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* SystemInitialize for Chart: '<Root>/AutomaticGate' */\r\n  rtDW.sfEvent = CALL_EVENT;\r\n  rtDW.WORK_DUR = 10.0;\r\n  rtDW.OPEN_DUR = 10.0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"STATE_PROJECT.h","type":"header","group":"model","path":"C:\\Users\\alfon\\OneDrive\\Desktop\\Università Magistrale\\Algoritmi e Protocolli per la Sicurezza\\Sistemi-embedded\\STATE_PROJECT_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: STATE_PROJECT.h\r\n *\r\n * Code generated for Simulink model 'STATE_PROJECT'.\r\n *\r\n * Model version                  : 1.42\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Sun May 26 09:44:30 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_STATE_PROJECT_h_\r\n#define RTW_HEADER_STATE_PROJECT_h_\r\n#ifndef STATE_PROJECT_COMMON_INCLUDES_\r\n#define STATE_PROJECT_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* STATE_PROJECT_COMMON_INCLUDES_ */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  real_T WORK_DUR;                     /* '<Root>/AutomaticGate' */\r\n  real_T OPEN_DUR;                     /* '<Root>/AutomaticGate' */\r\n  int32_T sfEvent;                     /* '<Root>/AutomaticGate' */\r\n  uint32_T temporalCounter_i1;         /* '<Root>/AutomaticGate' */\r\n  uint32_T temporalCounter_i2;         /* '<Root>/AutomaticGate' */\r\n  uint8_T is_c2_STATE_PROJECT;         /* '<Root>/AutomaticGate' */\r\n  uint8_T is_AUTOMATIC_GATE;           /* '<Root>/AutomaticGate' */\r\n  uint8_T is_EMERGENCY_P1_CLOSED;      /* '<Root>/AutomaticGate' */\r\n  uint8_T is_WORK_DUR_SETTING;         /* '<Root>/AutomaticGate' */\r\n  uint8_T is_OPEN_DUR_SETTING;         /* '<Root>/AutomaticGate' */\r\n  uint8_T is_OPENING;                  /* '<Root>/AutomaticGate' */\r\n  uint8_T is_CLOSING;                  /* '<Root>/AutomaticGate' */\r\n  uint8_T is_EMERGENCY_P1_OPEN;        /* '<Root>/AutomaticGate' */\r\n  uint8_T is_B1;                       /* '<Root>/AutomaticGate' */\r\n  uint8_T is_B3;                       /* '<Root>/AutomaticGate' */\r\n  uint8_T is_B2;                       /* '<Root>/AutomaticGate' */\r\n  uint8_T is_active_c2_STATE_PROJECT;  /* '<Root>/AutomaticGate' */\r\n  uint8_T is_active_B1;                /* '<Root>/AutomaticGate' */\r\n  uint8_T is_active_B3;                /* '<Root>/AutomaticGate' */\r\n  uint8_T is_active_B2;                /* '<Root>/AutomaticGate' */\r\n  uint8_T is_active_AUTOMATIC_GATE;    /* '<Root>/AutomaticGate' */\r\n  uint8_T is_active_OPEN_DUR_SETTING;  /* '<Root>/AutomaticGate' */\r\n  uint8_T is_active_WORK_DUR_SETTING;  /* '<Root>/AutomaticGate' */\r\n} DW;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* Model entry point functions */\r\nextern void STATE_PROJECT_initialize(void);\r\nextern void STATE_PROJECT_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<Root>/Display' : Unused code path elimination\r\n * Block '<Root>/Display1' : Unused code path elimination\r\n * Block '<Root>/Display2' : Unused code path elimination\r\n * Block '<Root>/Manual Switch' : Eliminated due to constant selection input\r\n * Block '<Root>/Manual Switch1' : Eliminated due to constant selection input\r\n * Block '<Root>/Manual Switch2' : Eliminated due to constant selection input\r\n * Block '<Root>/Manual Switch3' : Eliminated due to constant selection input\r\n * Block '<Root>/Manual Switch4' : Eliminated due to constant selection input\r\n * Block '<Root>/Constant1' : Unused code path elimination\r\n * Block '<Root>/Constant3' : Unused code path elimination\r\n * Block '<Root>/Constant5' : Unused code path elimination\r\n * Block '<Root>/Constant6' : Unused code path elimination\r\n * Block '<Root>/Constant9' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'STATE_PROJECT'\r\n * '<S1>'   : 'STATE_PROJECT/AutomaticGate'\r\n */\r\n#endif                                 /* RTW_HEADER_STATE_PROJECT_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\alfon\\OneDrive\\Desktop\\Università Magistrale\\Algoritmi e Protocolli per la Sicurezza\\Sistemi-embedded\\STATE_PROJECT_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'STATE_PROJECT'.\r\n *\r\n * Model version                  : 1.42\r\n * Simulink Coder version         : 9.8 (R2022b) 13-May-2022\r\n * C/C++ source code generated on : Sun May 26 09:44:30 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":false,"showJustificationLinks":false,"showProfilingInfo":false,"showTaskSummary":false}};